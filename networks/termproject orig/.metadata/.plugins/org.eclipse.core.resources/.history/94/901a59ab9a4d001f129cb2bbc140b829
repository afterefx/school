//Camera surface xml layout taken from
//http://www.brighthub.com/mobile/google-android/articles/43414.aspx
/*original starts here
package com.android.airpic;

import android.app.Activity;
import android.util.Log;
import android.os.Bundle;

public class Airpic extends Activity 
{
	private static final String DEBUG_TAG="Airpic"; //Allows output log in logcat
	
    /** Called when the activity is first created. 
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        //forceError();
        Log.i(DEBUG_TAG, "Info about Airpic");
       
       
    }
   
}
original ends here*/


/**
 * Copyright (c) 2007, Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */

package com.android.airpic;

import java.io.File;
import java.io.IOException;
import java.security.Timestamp;
import java.sql.Time;
import java.util.Date;

import android.app.Activity;
import android.content.Intent;
import android.graphics.PixelFormat;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.view.MenuItem;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.KeyEvent;
import android.hardware.Camera;

import android.util.Log;

public class Airpic extends Activity implements SurfaceHolder.Callback
{
    private static final String TAG = "Airpic: ";
    Camera mCamera;
    boolean mPreviewRunning = false;

    public void onCreate(Bundle icicle)
    {
        super.onCreate(icicle);
        Log.i(TAG, "====================");
        Log.i(TAG, "In the onCreate");
        Log.i(TAG, "====================");

    	
    	String baseDir = "/sdcard/"; 
    	Log.i(TAG, "====================");
    	Log.i(TAG, "about to check if dir exists");
    	Log.i(TAG, "====================");
    	if (new File("/sdcard/dcim/Camera/").exists())
    	{
    		Log.i(TAG, "====================");
    		Log.i(TAG, "Path does exist");
    		Log.i(TAG, "====================");
    		baseDir = "/sdcard/dcim/Camera/";
    	}
    	Log.i(TAG, "====================");
    	Log.i(TAG, "Going to create output file name next");
    	Log.i(TAG, "====================");
    	
    	 String outputFileName= baseDir + "test.jpg";
    	
    	Uri outputUri;
    	outputUri = Uri.parse(outputFileName);
    	
    	Log.i(TAG, "====================");
    	Log.i(TAG, "About to create intent with url: " + outputUri.toString());
    	Log.i(TAG, "====================");
    	
    	Intent intent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE );
    	intent.putExtra( MediaStore.EXTRA_OUTPUT, outputUri );
    	startActivityForResult( intent, 0 );
    	Log.i(TAG, "====================");
    	Log.i(TAG, "Picture capture done.");
    	Log.i(TAG, "====================");
    	
        //getWindow().setFormat(PixelFormat.TRANSLUCENT);

        //setContentView(R.layout.camera_api_test);
        //mSurfaceView = (SurfaceView)findViewById(R.id.surface);

        //mSurfaceHolder = mSurfaceView.getHolder();
        //mSurfaceHolder.addCallback(this);
        //mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
    }

    public boolean onCreateOptionsMenu(android.view.Menu menu) {
        MenuItem item = menu.add(0, 0, 0, "goto gallery");
        item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            public boolean onMenuItemClick(MenuItem item) {
                Uri target = Uri.parse("content://media/external/images/media");
                Intent intent = new Intent(Intent.ACTION_VIEW, target);
                startActivity(intent);
                return true;
            }
        });
        return true;
    }
    
    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState)
    {
        super.onRestoreInstanceState(savedInstanceState);
    }

    Camera.PictureCallback mPictureCallback = new Camera.PictureCallback() 
    {
        public void onPictureTaken(byte[] data, Camera c) {
            Log.i(TAG, "PICTURE CALLBACK: data.length = " + data.length);
            mCamera.startPreview();
        }
    };

    public boolean onKeyDown(int keyCode, KeyEvent event)
    {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            return super.onKeyDown(keyCode, event);
        }
 
        if (keyCode == KeyEvent.KEYCODE_CAMERA) 
        {
        	Log.i(TAG, "====================");
        	Log.i(TAG, "Camera button pressed and picture callback called");
        	Log.i(TAG, "====================");
            return true;
        }

        return false;
    }

    protected void onResume()
    {
    	Log.i(TAG, "====================");
        Log.e(TAG, "onResume");
        Log.i(TAG, "====================");
        super.onResume();
    }

    protected void onSaveInstanceState(Bundle outState)
    {
        super.onSaveInstanceState(outState);
    }

    protected void onStop()
    {
    	Log.i(TAG, "====================");
        Log.e(TAG, "onStop");
        Log.i(TAG, "====================");
        super.onStop();
    }

    public void surfaceCreated(SurfaceHolder holder)
    {
    	Log.i(TAG, "====================");
        Log.e(TAG, "surfaceCreated");
        Log.i(TAG, "====================");
        mCamera = Camera.open();
        mCamera.startPreview();
        mPreviewRunning = true;
    }

    public void surfaceChanged(SurfaceHolder holder, int format, int w, int h)
    {
    	Log.i(TAG, "====================");
        Log.e(TAG, "surfaceChanged");
        Log.i(TAG, "====================");

        // XXX stopPreview() will crash if preview is not running
        if (mPreviewRunning) 
        {
            mCamera.stopPreview();
        }

        Camera.Parameters p = mCamera.getParameters();
        p.setPreviewSize(w, h);
        mCamera.setParameters(p);
        try
        {
        	mCamera.setPreviewDisplay(holder);
        }
        catch(IOException m)
        {
        	
        };
        mCamera.startPreview();
        mPreviewRunning = true;
    }

    public void surfaceDestroyed(SurfaceHolder holder)
    {
    	Log.i(TAG, "====================");
        Log.e(TAG, "surfaceDestroyed");
        Log.i(TAG, "====================");
        mCamera.stopPreview();
        mPreviewRunning = false;
        mCamera.release();
    }

    private SurfaceView mSurfaceView;
    private SurfaceHolder mSurfaceHolder;
}

