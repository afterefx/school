python.org for a tutorial
do not go to python.com
Guido vanRossum made python
This is a hybrid language - It can be procedural, functional, object oriented.
It is not a logical language
There should be an ide called idle
no declarations -
    variables are by reference
INDENTION HAS MEANING
does short cut evaluation
variable names start with a letter, -, _
you can overload operators (__add__, __sub__, __mult__, __div__)


AND = and
OR = or




 ___          _
| x | --X--> |5|
 --- \        -
      \      _____
       ---> |Hello|
             -----
x=5
x="hello"

====example====
def main():
    print "hello"

main()


===============================
==== conditional statement=====
===============================
-------if/elif/else -------------
if temperature >= 90 :
    print "Go swim"
elif temperature >=75 :
    print "Go take a hike"
else:
    print "sit by fire"

==============================
========= repetition =========
==============================
----- while -------
temp = 15
while temp <= 15:
    print temp
    temp += 3

------ for -------
for i in range(3):
    print i

______________output
0
1
2

if you put a comman it will put a space and write it on the same line

%%%%%%%%%%%%%%% a list (aka set [ similar to array])
%%%%%%%%%%%%%% there are subscripts for the list
for j in ["a",3, "Hello"]:
    print j
______________output
a
3
Hello

%%%%%%%%%%%%%% range(start, up to but not including, step)
for k in range(0,12,2):
    print k
______________output
0
2
4
6
8
10

%%%%%%%%%%%
for m in range(5,0,-1):
    print m

========================================
===== another example (True / False)====
========================================
y = 2
x = y > 5
if x == True:
    print y

===============================
=========== list ==============
===============================
lon=[]
for i in range(15):
    lon.append(0)
for i in range(15):
    print lon[i]

#tuple () a set of values that never change. you initiate them but they never change
#dictionary {} an associative array
    {word:1, bind:2, dog:"bark"}

===============================
========== functions ============
===============================
def fun1(x):
    return x, x+1, x+2
def main():
    print fun1(1)

===============================
=== nested functions
===============================
def funX(...):
    def funY(...):
        def funZ(...):
            return

===============================
=========== string ============
===============================
word = "bluebird"
        01234567
print word[0:4]a #prints blue aka slicing
print word [4:] #prints bird

===============================
=========== classes ============
===============================
def autos():
    def __init__(self, make, model, yr, num_cyl):
        self.make=make
        self.model=model
        self.yr=model
        self.num_cyl=num_cyl
    def getMake(self):
        return self.makE
