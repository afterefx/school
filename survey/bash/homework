=========
== 1.7 ==
=========
1. Where is the bash program located on your system?
    /bin/bash
2. Use the --version option to find out which version you are running.
    GNU bash, version 3.2.48(1)-release (x86_64-apple-darwin10.0)

3. Which shell configuration files are read when you login to your system using the graphical user interface and then opening a terminal window?
   ~/.bash_profile

4. Are the following shells interactive shells? Are they login shells?

    A shell opened by clicking on the background of your graphical desktop, selecting "Terminal" or such from a menu.
        interactive non-login

    A shell that you get after issuing the command ssh localhost.
        interactive login

    A shell that you get when logging in to the console in text mode.
        interactive login

    A shell obtained by the command xterm &.
        interactive non-login

    A shell opened by the mysystem.sh script.
        interactive non-login

    A shell that you get on a remote host, for which you didn't have to give the login and/or password because you use SSH and maybe SSH keys.
        interactive login

5. Can you explain why bash does not exit when you type Ctrl+C on the command line?
    The sigint is caught and handled by bash

=========
== 2.5 ==
=========
1. Write a script using your favorite editor. The script should display the path to your homedirectory and the terminal type that you are using. Additionally it shows all the services started up in runlevel 3 on your system. (hint: use HOME, TERM and ls /etc/rc3.d/S*)

2. Add comments in your script.

3. Add information for the users of your script.

4. Change permissions on your script so that you can run it.

5. Run the script in normal mode and in debug mode. It should run without errors.

6. Make errors in your script: see what happens if you misspell commands, if you leave out the first line or put something unintelligible there, or if you misspell shell variable names or write them in lower case characters after they have been declared in capitals. Check what the debug comments say about this.

!!!!!!!!!!!!!! PRINT SHELL SCRIPT AND TURN IN WITH HW @ LOCATION BELOW !!!!!!!!!!!!
~/repos/scripts/environmentInfo

=========
== 3.8 ==
=========
1. Create 3 variables, VAR1, VAR2 and VAR3; initialize them to hold the values "thirteen", "13" and "Happy Birthday" respectively.
VAR1="thirteen"; VAR2="13"; VAR3="Happy Birthday";

2. Display the values of all three variables.
echo "$VAR1 is the first variable"
echo "$VAR2 is the second variable"
echo "$VAR3 is the third variable"

3. Are these local or global variables?
local

4. Remove VAR3.
unset VAR3

5. Can you see the two remaining variables in a new terminal window?
no

9. Write a script in which you assign two integer values to two variables. The script
   should calculate the surface of a rectangle which has these proportions.  It
   should be aired with comments and generate elegant output.

!!!!!!!!!!!!!! PRINT SHELL SCRIPT AND TURN IN WITH HW @ LOCATION BELOW !!!!!!!!!!!!
~/repos/scripts/hw1-sec3.sh


=========
== 4.5 ==
=========
1. Display a list of all the users on your system who log in with the Bash shell as a default.
grep bash /etc/passwd

2. From the /etc/group directory, display all lines starting with the string "daemon".
grep ^daemon /etc/group

3. Print all the lines from the same file that don't contain the string.
grep -v ^daemon /etc/group

4. Display localhost information from the /etc/hosts file, display the line number(s) matching the search string and count the number of occurrences of the string.

grep -n '\<localhost' /etc/hosts
grep -c '\<localhost' /etc/hosts

5. Display a list of /usr/share/doc subdirectories containing information about shells.
grep -r [^A-Za-z]shell /usr/share/doc/

6. How many README files do these subdirectories contain? Don't count anything in the form of "README.a_string".
grep -r \<README\> /usr/share/doc/ | wc -l

7. Make a list of files in your home directory that were changed less that 10 hours ago, using grep, but leave out directories.

8. Put these commands in a shell script that will generate comprehensible output.


=========
== 7.5 ==
=========
1. Use an if/then/elif/else construct that prints information about the current month. The script should print the number of days in this month, and give information about leap years if the current month is February.


2. Do the same, using a case statement and an alternative use of the date command.
##############################################################
##############################################################
##############################################################
                    left off here!!!!!
##############################################################
##############################################################
##############################################################
##############################################################

5. Write a script called whichdaemon.sh that checks if the httpd and init daemons are running on your system. If an httpd is running, the script should print a message like, "This machine is running a web server." Use ps to check on processes.
